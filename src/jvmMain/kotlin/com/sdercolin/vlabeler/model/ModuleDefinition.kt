package com.sdercolin.vlabeler.model

import com.sdercolin.vlabeler.util.toFile
import com.sdercolin.vlabeler.util.toFileOrNull
import kotlinx.serialization.Serializable
import java.io.File

/**
 * A serializable [ModuleDefinition] used to receive data from [LabelerConf.ProjectConstructor] scripts. See
 * src/main/jvmMain/resources/js/module_definition.js for the JavaScript class definition.
 */
@Serializable
data class RawModuleDefinition(
    val name: String,
    val sampleDirectoryPath: String,
    val sampleFileNames: List<String>,
    val inputFilePaths: List<String>? = null,
    val labelFilePath: String? = null,
) {
    fun toModuleDefinition(): ModuleDefinition {
        val sampleDirectory = File(sampleDirectoryPath)
        val sampleFiles = sampleFileNames.map { sampleDirectory.resolve(it) }
        val inputFiles = inputFilePaths?.mapNotNull { it.toFileOrNull(ensureIsFile = true) }
        val labelFile = labelFilePath?.toFile()
        return ModuleDefinition(name, sampleDirectory, sampleFiles, inputFiles, labelFile)
    }
}

/**
 * A data class representing a module definition to be used in project creation process.
 *
 * @property name The name of the module.
 * @property sampleDirectory The directory containing the sample files.
 * @property sampleFiles The sample files.
 * @property inputFiles The input files. Could be null, which means the raw labels are generated by a template plugin.
 * @property labelFile The target raw label file.
 */
data class ModuleDefinition(
    val name: String,
    val sampleDirectory: File,
    val sampleFiles: List<File>,
    val inputFiles: List<File>?,
    val labelFile: File?,
) {

    fun toRawModuleDefinition(): RawModuleDefinition = RawModuleDefinition(
        name,
        sampleDirectory.absolutePath,
        sampleFiles.map { it.name },
        inputFiles?.map { it.absolutePath },
        labelFile?.absolutePath,
    )
}

fun Module.getDefinition(project: Project, inputFiles: List<File>?): ModuleDefinition = ModuleDefinition(
    name,
    getSampleDirectory(project),
    entries.map { it.sample }.distinct().sorted().map { getSampleFile(project, it) },
    inputFiles,
    getRawFile(project),
)
